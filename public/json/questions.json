questions{
	cli{
		["See the path of the current directory",
		"See the contents in the current directory (including hidden files)",
		"Create new files and directories",
		"Change directories",
		"Copy, move and delete files and directories",
		"Open files and directories using Sublime",
		"Create bash alias (subl)",
		"Minimize typing by using tab completion",
		"Use directory shortcuts \".\", \"..\", \"~\"",
		"Explain why people use CLI instead of GUI"
		]
	},
	git{
		["Explain what Git is and why we use it",
		"Initialize a local git repository",
		"Add and commit changes to a git repository",
		"Create and switch between branches",
		"Explain what a branch is and why we would use one",
		"Be able to merge branches",
		"Explain what happens when you merge two branches"
		]
	},
	// github{},
	// dataTypes{},
	// conditionals{},
	// loopsAndEnums{},
	// objects{},
	// refactor{}
}



// GitHub
// Differentiate between Git and Github
// List three best practices re: using git
// Add SSH keys to github account
// Add and remove a remote repository
// Push commits to a remote repository
// Fork and Clone existing repository from Github
// Use Github to submit a pull request
// Explain what a fork is and why we would use one
// Explain difference between fetch and pull
// Explain the difference between a clone and a fork
// Diagram and explain the homework submission process

// Ruby Data Types
// Identify some key characteristics of Ruby as a language
// Describe the different types in Ruby (numbers, strings, etc.)
// Explain what memory is and how it differs from persistent storage systems
// Explain what a reference is and how it relates to variable assignment
// Run Ruby code using pry
// Perform basic operations (arithmeticic operations, capitalize, etc.) on strings and numbers
// Reference the Ruby docs to learn more about Ruby
// Manipulate strings using concatenation & interpolation
// Assign values to variables using Ruby naming conventions
// Run a Ruby program from the terminal
// Get input from the user from the terminal using gets
// Print output to the terminal using puts

// Ruby Conditionals
// Explain what an if/else/elsif statement is and when you would use one
// Use comparison operators to evaluate and compare statements
// Use boolean logic (!, &&, ||) to combine and manipulate conditionals
// Use if, else, elsif, unless statements to control logic flow in a Ruby program
// Differentiate between true, false, truthy, and falsey
// Compare and contrast a case statement to if/else statements

// Arrays, Hashes, and Symbols
// 3
// Explain what an array is and what purpose it serves
// Create an array
// Access elements of an array
// Add, remove, and modify elements of an array
// Explain what a hash is and what purpose it serves
// Create a hash
// Access elements of a hash
// Add, remove, and modify elements of a hash
// Differentiate between arrays and hashes and when you would use each
// Explain what a symbol is and why they are commonly used as keys
// Explain the difference between a symbol and a string
// Use a symbol as key in a hash

// Ruby Loops & Enumerators
// Compare loops to enumeration (e.g. each, times, map) and explain when you would use each
// Use while loops to execute code multiple times
// Explain differences between select, map, and delete
// Set and update a base case condition to avoid infinite loops
// Compare and contrast "break" and "next", and when you would use each
// Use "break" and "next" to appropriately exit a loop
// Explain what 'yielding' to a block means, and why it is necessary

// Ruby Objects & Methods
// Explain the difference between a class and an instance
// Explain the advantages of using objects to group qualities and actions
// Define what a method is and why we would use them
// Define what an argument is and how they are used
// Describe what the 'return' keyword does and why it's necessary
// Write a class with an initialize method
// Instantiate and use an object
// Explain why we use getter and setter methods and relation to scope
// Write getter and setter methods 
// Write a method that accepts multiple arguments
// Set default arguments
// Write a method that returns a value

// Advanced Objects
// Describe the difference between local variables, instance variables, class variables and global variables
// attr_accessor, reader, writer
// Explain variable scope and how it works
// Use "self" to reference an object instance
// Write a class that inherits from another class
// Use "super" to inherit data from a parent class
// Explain the difference between class and instance methods
// Explain the usage of inheritance

// OOP
// Explain what object-oriented Programming is
// Explain what encapsulation is
// Compare and contrast OOP to other programming paradigms
// Describe abstraction and how it applies to objects
// Explain the difference between public, private, and protected methods
// Create multi-file Ruby programs using 'require_relative'

// Refactoring and Best Practices. DRY
// Explain what DRY is, and why it is important
// Describe what refactoring is and when and why you should do it
// Explain why coding conventions are important and why we should follow them
// Describe the naming conventions for variables, methods, classes
// Explain what code commenting is, why it's valuable and when to use it
// Explain what 'syntactic sugar' means and how it can be useful
// Refactor a program with DRY principles
// Properly space and indent a program with multiple nested statements
// Use the +=, -=, ||=, &method and other 'syntactic sugar' operators
// Name methods, classes and variables correctly
// Add comments to a program to ease readability and describe meaning